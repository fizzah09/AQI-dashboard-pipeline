name: Feature Pipeline - Hourly

on:
  schedule:
    # Runs every hour at minute 0
    - cron: '0 * * * *'
  workflow_dispatch: # Manual trigger
  push:
    branches:
      - main
    paths:
      - 'src/**'
      - 'config/**'
      - '.github/workflows/feature-pipeline.yml'

env:
  PYTHON_VERSION: '3.10'

jobs:
  run-feature-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create Environment File
      run: |
        if [ -n "${{ secrets.AQIDASHBOARD }}" ]; then
          echo "Using composite secret AQIDASHBOARD to create .env"
          printf "%s\n" "${{ secrets.AQIDASHBOARD }}" > .env
        else
          echo "HOPSWORKS_API_KEY=\"${{ secrets.HOPSWORKS_API_KEY }}\"" > .env
          echo "HOPSWORKS_PROJECT_NAME=\"${{ secrets.HOPSWORKS_PROJECT_NAME }}\"" >> .env
          echo "OPENWEATHER_API_KEY=\"${{ secrets.OPENWEATHER_API_KEY }}\"" >> .env
          echo "LOCATION_LAT=\"${{ secrets.LOCATION_LAT }}\"" >> .env
          echo "LOCATION_LON=\"${{ secrets.LOCATION_LON }}\"" >> .env
          echo "LOCATION_CITY=\"${{ secrets.LOCATION_CITY }}\"" >> .env
        fi

    - name: CI debug - env & secret presence
      run: |
        echo "CI debug: checking .env and secret presence (values redacted)"
        echo "-- .env keys (redacted) --"
        if [ -f .env ]; then
          sed -n '1,200p' .env | sed -E 's/=.*/=REDACTED/' || true
        else
          echo ".env not found"
        fi
        echo "-- secret presence checks --"
        if [ -n "${{ secrets.AQIDASHBOARD }}" ]; then echo "AQIDASHBOARD=present"; else echo "AQIDASHBOARD=missing"; fi
        if [ -n "${{ secrets.HOPSWORKS_API_KEY }}" ]; then echo "HOPSWORKS_API_KEY=present"; else echo "HOPSWORKS_API_KEY=missing"; fi
        if [ -n "${{ secrets.HOPSWORKS_PROJECT_NAME }}" ]; then echo "HOPSWORKS_PROJECT_NAME=present"; else echo "HOPSWORKS_PROJECT_NAME=missing"; fi
        if [ -n "${{ secrets.OPENWEATHER_API_KEY }}" ]; then echo "OPENWEATHER_API_KEY=present"; else echo "OPENWEATHER_API_KEY=missing"; fi
        if [ -n "${{ secrets.LOCATION_LAT }}" ]; then echo "LOCATION_LAT=present"; else echo "LOCATION_LAT=missing"; fi
        if [ -n "${{ secrets.LOCATION_LON }}" ]; then echo "LOCATION_LON=present"; else echo "LOCATION_LON=missing"; fi
        if [ -n "${{ secrets.LOCATION_CITY }}" ]; then echo "LOCATION_CITY=present"; else echo "LOCATION_CITY=missing"; fi

    - name: Run Feature Pipeline
      run: |
        python src/main.py
      continue-on-error: false

    - name: Verify Feature Store Upload
      run: |
        python -c "
        import os
        import hopsworks
        from datetime import datetime
        
        print('üîç Verifying Hopsworks Feature Store Upload...')
        print('='*70)
        
        # Login to Hopsworks
        project = hopsworks.login(
            api_key_value=os.getenv('HOPSWORKS_API_KEY'),
            project=os.getenv('HOPSWORKS_PROJECT_NAME')
        )
        
        print(f'‚úÖ Connected to Project: {project.name}')
        
        # Get Feature Store
        fs = project.get_feature_store()
        
        # Check weather features
        try:
            weather_fg = fs.get_feature_group('weather_features', version=2)
            print(f'\nüì¶ Weather Feature Group:')
            print(f'   Name: {weather_fg.name}')
            print(f'   Version: {weather_fg.version}')
            print(f'   Features: {len(weather_fg.features)}')
            
            # Get latest statistics
            stats = weather_fg.statistics
            if stats:
                print(f'   Last Updated: {stats.commit_time if hasattr(stats, \"commit_time\") else \"N/A\"}')
        except Exception as e:
            print(f'‚ö†Ô∏è  Weather feature group error: {e}')
        
        # Check pollutant features
        try:
            pollutant_fg = fs.get_feature_group('pollutant_features', version=2)
            print(f'\nüì¶ Pollutant Feature Group:')
            print(f'   Name: {pollutant_fg.name}')
            print(f'   Version: {pollutant_fg.version}')
            print(f'   Features: {len(pollutant_fg.features)}')
        except Exception as e:
            print(f'‚ö†Ô∏è  Pollutant feature group error: {e}')
        
        print('\n' + '='*70)
        print(f'‚úÖ Feature Pipeline Verification Complete - {datetime.now()}')
        "

    - name: Upload Pipeline Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: feature-pipeline-logs-${{ github.run_number }}
        path: |
          *.log
          logs/
        retention-days: 7

    - name: Notify on Failure
      if: failure()
      run: |
        echo "‚ùå Feature Pipeline Failed"
        echo "Time: $(date)"
        echo "Run Number: ${{ github.run_number }}"
        exit 1
